#+TITLE: Svi Cleaning
* Import Dataset
#+begin_src jupyter-python :session py :kernel Python3 :tangle yes
import pandas as pd
import numpy as np
df = pd.read_csv('/home/cynfish/OneDrive/Wentworth/Fall-2021-WIT/CSAS/Final Project/SVI2018_US.csv')
df.head(5)
#+end_src

#+RESULTS:
#+begin_example
   ST    STATE ST_ABBR  STCNTY   COUNTY        FIPS  \
0   1  ALABAMA      AL    1015  Calhoun  1015981901
1   1  ALABAMA      AL    1015  Calhoun  1015981902
2   1  ALABAMA      AL    1015  Calhoun  1015981903
3   1  ALABAMA      AL    1097   Mobile  1097003605
4   1  ALABAMA      AL    1097   Mobile  1097990000

                                        LOCATION  AREA_SQMI  E_TOTPOP  \
0  Census Tract 9819.01, Calhoun County, Alabama  24.243865         0
1  Census Tract 9819.02, Calhoun County, Alabama  34.646714         0
2  Census Tract 9819.03, Calhoun County, Alabama  13.926276         0
3     Census Tract 36.05, Mobile County, Alabama   0.732300       899
4      Census Tract 9900, Mobile County, Alabama   0.000000         0

   M_TOTPOP  ...  F_CROWD  F_NOVEH  F_GROUPQ  F_THEME4  F_TOTAL  E_UNINSUR  \
0        12  ...     -999     -999      -999      -999     -999          0
1        12  ...     -999     -999      -999      -999     -999          0
2        12  ...     -999     -999      -999      -999     -999          0
3       316  ...        0     -999         1      -999     -999         33
4        12  ...     -999     -999      -999      -999     -999          0

   M_UNINSUR  EP_UNINSUR  MP_UNINSUR  E_DAYPOP
0         12      -999.0      -999.0       656
1         12      -999.0      -999.0       146
2         12      -999.0      -999.0         0
3         36         3.7         4.1      5135
4         12      -999.0      -999.0         0

[5 rows x 124 columns]
#+end_example

The SVI is created via 4 themes, Social Economic Ranking + Household Composition Disability + Minority Status & Language = Overall Vulnerability.
The four summary theme ranking variables, detailed in the Data Dictionary below, are:

    Socioeconomic – RPL_THEME1
    Household Composition & Disability – RPL_THEME2
    Minority Status & Language – RPL_THEME3
    Housing Type & Transportation – RPL_THEME4

This uses the American Community Survey (ACS) to create an estimate.
By creating a confidence interval between an estimate and Margin of Error. By comparing percentile rank, which is the percentage of tracts at or below particular score. (0~1)
1 is most vulnerable, 0 is least vulnerable.

List Columns of this CSV
#+begin_src jupyter-python :session py :kernel Python3 :tangle yes
Cal2018 = df[df["STATE"] == "CALIFORNIA"]
Cal2018.columns.tolist()
#+end_src

#+RESULTS:
| ST | STATE | ST_ABBR | STCNTY | COUNTY | FIPS | LOCATION | AREA_SQMI | E_TOTPOP | M_TOTPOP | E_HU | M_HU | E_HH | M_HH | E_POV | M_POV | E_UNEMP | M_UNEMP | E_PCI | M_PCI | E_NOHSDP | M_NOHSDP | E_AGE65 | M_AGE65 | E_AGE17 | M_AGE17 | E_DISABL | M_DISABL | E_SNGPNT | M_SNGPNT | E_MINRTY | M_MINRTY | E_LIMENG | M_LIMENG | E_MUNIT | M_MUNIT | E_MOBILE | M_MOBILE | E_CROWD | M_CROWD | E_NOVEH | M_NOVEH | E_GROUPQ | M_GROUPQ | EP_POV | MP_POV | EP_UNEMP | MP_UNEMP | EP_PCI | MP_PCI | EP_NOHSDP | MP_NOHSDP | EP_AGE65 | MP_AGE65 | EP_AGE17 | MP_AGE17 | EP_DISABL | MP_DISABL | EP_SNGPNT | MP_SNGPNT | EP_MINRTY | MP_MINRTY | EP_LIMENG | MP_LIMENG | EP_MUNIT | MP_MUNIT | EP_MOBILE | MP_MOBILE | EP_CROWD | MP_CROWD | EP_NOVEH | MP_NOVEH | EP_GROUPQ | MP_GROUPQ | EPL_POV | EPL_UNEMP | EPL_PCI | EPL_NOHSDP | SPL_THEME1 | RPL_THEME1 | EPL_AGE65 | EPL_AGE17 | EPL_DISABL | EPL_SNGPNT | SPL_THEME2 | RPL_THEME2 | EPL_MINRTY | EPL_LIMENG | SPL_THEME3 | RPL_THEME3 | EPL_MUNIT | EPL_MOBILE | EPL_CROWD | EPL_NOVEH | EPL_GROUPQ | SPL_THEME4 | RPL_THEME4 | SPL_THEMES | RPL_THEMES | F_POV | F_UNEMP | F_PCI | F_NOHSDP | F_THEME1 | F_AGE65 | F_AGE17 | F_DISABL | F_SNGPNT | F_THEME2 | F_MINRTY | F_LIMENG | F_THEME3 | F_MUNIT | F_MOBILE | F_CROWD | F_NOVEH | F_GROUPQ | F_THEME4 | F_TOTAL | E_UNINSUR | M_UNINSUR | EP_UNINSUR | MP_UNINSUR | E_DAYPOP |

* Save Copy 1
Save to new CSV file
#+begin_src jupyter-python :session py :kernel Python3 :tangle yes
Cal2018.to_csv("/home/cynfish/OneDrive/Wentworth/Fall-2021-WIT/CSAS/Final Project/Cal_SVI.csv", index = False)
#+end_src


* Clean out rows with erroneous data
Create a dataframe just for fields without -999 in their fields.
Those -999 are indicators for places with not enough info for an estimate.

#+begin_src jupyter-python :session py :kernel Python3 :tangle yes
Cal2018 = Cal2018[~Cal2018.eq(-999).any(1)]
Cal2018 = Cal2018.reindex()
# Test out Cal2018 to see if we did it correctly
Cal2018.head(10)
#+end_src

#+RESULTS:
#+begin_example
      ST       STATE ST_ABBR  STCNTY   COUNTY        FIPS  \
2598   6  CALIFORNIA      CA    6001  Alameda  6001400100
2599   6  CALIFORNIA      CA    6001  Alameda  6001400200
2600   6  CALIFORNIA      CA    6001  Alameda  6001400300
2601   6  CALIFORNIA      CA    6001  Alameda  6001400400
2602   6  CALIFORNIA      CA    6001  Alameda  6001400500
2603   6  CALIFORNIA      CA    6001  Alameda  6001400600
2604   6  CALIFORNIA      CA    6001  Alameda  6001400700
2605   6  CALIFORNIA      CA    6001  Alameda  6001400800
2606   6  CALIFORNIA      CA    6001  Alameda  6001400900
2607   6  CALIFORNIA      CA    6001  Alameda  6001401200

                                           LOCATION  AREA_SQMI  E_TOTPOP  \
2598  Census Tract 4001, Alameda County, California   2.661918      3115
2599  Census Tract 4002, Alameda County, California   0.226472      2025
2600  Census Tract 4003, Alameda County, California   0.426971      5000
2601  Census Tract 4004, Alameda County, California   0.276301      3843
2602  Census Tract 4005, Alameda County, California   0.227919      3786
2603  Census Tract 4006, Alameda County, California   0.115003      1638
2604  Census Tract 4007, Alameda County, California   0.339887      5116
2605  Census Tract 4008, Alameda County, California   0.268819      3792
2606  Census Tract 4009, Alameda County, California   0.162502      2471
2607  Census Tract 4012, Alameda County, California   0.256227      2577

      M_TOTPOP  ...  F_CROWD  F_NOVEH  F_GROUPQ  F_THEME4  F_TOTAL  E_UNINSUR  \
2598       219  ...        0        0         0         0        1         41
2599       110  ...        0        0         0         0        0         36
2600       311  ...        0        0         0         0        0         60
2601       366  ...        0        0         0         0        0        125
2602       355  ...        0        0         0         0        0        137
2603       137  ...        0        0         0         0        0         53
2604       570  ...        0        0         0         0        0        635
2605       420  ...        0        0         0         0        0        213
2606       256  ...        0        0         0         0        0         72
2607       167  ...        0        0         0         0        0         88

      M_UNINSUR  EP_UNINSUR  MP_UNINSUR  E_DAYPOP
2598         28         1.3         0.9      4649
2599         35         1.8         1.7      2714
2600         54         1.2         1.1      3410
2601         69         3.3         1.7      2645
2602         88         3.6         2.3      1616
2603         41         3.2         2.5       842
2604        263        12.4         4.4      2080
2605         98         5.6         2.4      2308
2606         58         2.9         2.3      1148
2607         56         3.4         2.2      2900

[10 rows x 124 columns]
#+end_example

(Another way to determine the lack of data for an estimate is if E_TOTPOP is 0)
* Isolate Important Variables
The important rankings in this table is **RPL_THEMES** for overall percentile ranking.
Change the following column names for readability.
- Socioeconomic – RPL_THEME1
- Household Composition & Disability – RPL_THEME2
- Minority Status & Language – RPL_THEME3
- Housing Type & Transportation – RPL_THEME4

#+begin_comment python
# This Works in Org, but not in Jupyter Notebook
Cal2018.rename(columns={'RPL_THEME1': 'Socioeconmic',
                        'RPL_THEME2': 'Household Composition & Disability',
                        'RPL_THEME3': 'Minority Status & Language',
                        'RPL_THEME4': 'Housing Type & Transportation',
                        'RPL_THEMES': 'Overall Percentile Ranking'})
DisplayRankings = Cal2018[[[['STATE', 'COUNTY', 'LOCATION', 'Socioeconmic', 'Household Composition & Disability', 'Minority Status & Language', 'Housing Type & Transportation', 'Overall Percentile Ranking']]]]
#+end_comment

#+begin_src jupyter-python :session py :kernel Python3 :tangle yes
# This works in both jupyter-python and org
DisplayRankings = Cal2018[['STATE', 'COUNTY', 'LOCATION', 'RPL_THEME1', 'RPL_THEME2', 'RPL_THEME3', 'RPL_THEME4', 'RPL_THEMES']]
DisplayRankings = DisplayRankings[~DisplayRankings.eq(-999).any(1)]
DisplayRankings = DisplayRankings.reindex()
# DisplayRankings.shape: (7977, 8)
DisplayRankings.head
#+end_src

#+RESULTS:
#+begin_example
<bound method NDFrame.head of             STATE          COUNTY  \
2598   CALIFORNIA         Alameda
2599   CALIFORNIA         Alameda
2600   CALIFORNIA         Alameda
2601   CALIFORNIA         Alameda
2602   CALIFORNIA         Alameda
...           ...             ...
72709  CALIFORNIA  San Bernardino
72710  CALIFORNIA   San Francisco
72711  CALIFORNIA   San Francisco
72712  CALIFORNIA   San Francisco
72713  CALIFORNIA     Santa Clara

                                                LOCATION  RPL_THEME1  \
2598       Census Tract 4001, Alameda County, California      0.1043
2599       Census Tract 4002, Alameda County, California      0.0848
2600       Census Tract 4003, Alameda County, California      0.1637
2601       Census Tract 4004, Alameda County, California      0.1809
2602       Census Tract 4005, Alameda County, California      0.2154
...                                                  ...         ...
72709  Census Tract 57.01, San Bernardino County, Cal...      0.8643
72710  Census Tract 122.02, San Francisco County, Cal...      0.6935
72711  Census Tract 124.02, San Francisco County, Cal...      0.4032
72712  Census Tract 125.02, San Francisco County, Cal...      0.9251
72713  Census Tract 5031.22, Santa Clara County, Cali...      0.8826

       RPL_THEME2  RPL_THEME3  RPL_THEME4  RPL_THEMES
2598       0.2670      0.5815      0.0244      0.0675
2599       0.1437      0.5053      0.5489      0.2280
2600       0.0503      0.5629      0.8991      0.3608
2601       0.0805      0.5961      0.6120      0.2866
2602       0.0239      0.6686      0.4412      0.1902
...           ...         ...         ...         ...
72709      0.8698      0.9652      0.9999      0.9978
72710      0.1461      0.9035      0.9889      0.8420
72711      0.0742      0.8682      0.9826      0.6684
72712      0.4891      0.9569      0.9992      0.9892
72713      0.8183      0.9738      0.9746      0.9843

[7977 rows x 8 columns]>
#+end_example

* Add new Column Year
Now compare different years of SVI changes in California.
To do that, we need a year value. This csv contains all Social Vulnerability Index for 2018.
Append new column Year with value 2018.

#+begin_src jupyter-python :session py :kernel Python3 :tangle yes
Cal2018['year'] = pd.to_datetime('2018', format='%Y')
Cal2018['year'] = Cal2018['year'].dt.year
Cal2018.iloc[:5]
#+end_src

#+RESULTS:
#+begin_example
      ST       STATE ST_ABBR  STCNTY   COUNTY        FIPS  \
2598   6  CALIFORNIA      CA    6001  Alameda  6001400100
2599   6  CALIFORNIA      CA    6001  Alameda  6001400200
2600   6  CALIFORNIA      CA    6001  Alameda  6001400300
2601   6  CALIFORNIA      CA    6001  Alameda  6001400400
2602   6  CALIFORNIA      CA    6001  Alameda  6001400500

                                           LOCATION  AREA_SQMI  E_TOTPOP  \
2598  Census Tract 4001, Alameda County, California   2.661918      3115
2599  Census Tract 4002, Alameda County, California   0.226472      2025
2600  Census Tract 4003, Alameda County, California   0.426971      5000
2601  Census Tract 4004, Alameda County, California   0.276301      3843
2602  Census Tract 4005, Alameda County, California   0.227919      3786

      M_TOTPOP  ...  F_NOVEH  F_GROUPQ  F_THEME4  F_TOTAL  E_UNINSUR  \
2598       219  ...        0         0         0        1         41
2599       110  ...        0         0         0        0         36
2600       311  ...        0         0         0        0         60
2601       366  ...        0         0         0        0        125
2602       355  ...        0         0         0        0        137

      M_UNINSUR  EP_UNINSUR  MP_UNINSUR  E_DAYPOP  year
2598         28         1.3         0.9      4649  2018
2599         35         1.8         1.7      2714  2018
2600         54         1.2         1.1      3410  2018
2601         69         3.3         1.7      2645  2018
2602         88         3.6         2.3      1616  2018

[5 rows x 125 columns]
#+end_example

* Save Copy 2
This copy contains all data in California that has a valid (i.e. not 0 or -999) data.

#+begin_src jupyter-python :session py :kernel Python3 :tangle yes
Cal2018.to_csv("/home/cynfish/OneDrive/Wentworth/Fall-2021-WIT/CSAS/Final Project/Cal2018_SVI_cleaned.csv", index = False)
#+end_src

#+RESULTS:

* Repeat Above Steps: Clean and Gather Data of year 2016, 2014, 2010 together
** repeat above stats with SVI 2016
#+begin_src jupyter-python :session py :kernel Python3 :tangle yes
df1 = pd.read_csv('/home/cynfish/OneDrive/Wentworth/Fall-2021-WIT/CSAS/Final Project/SVI2016_US.csv')
Cal2016 = df1[df1["STATE"] == "CALIFORNIA"]
Cal2016 = Cal2016[~Cal2016.eq(-999).any(1)]
Cal2016 = Cal2016.reindex()
Cal2016['year'] = pd.to_datetime('2016', format='%Y')
Cal2016['year'] = Cal2016['year'].dt.year
Cal2016.to_csv("/home/cynfish/OneDrive/Wentworth/Fall-2021-WIT/CSAS/Final Project/Cal2016_SVI_cleaned.csv", index = False)
Cal2016.iloc[:5]
#+end_src

#+RESULTS:
#+begin_example
       FID  ST       STATE ST_ABBR  STCNTY   COUNTY        FIPS  \
3637  3637   6  CALIFORNIA      CA    6001  Alameda  6001400100
3638  3638   6  CALIFORNIA      CA    6001  Alameda  6001400200
3639  3639   6  CALIFORNIA      CA    6001  Alameda  6001400300
3640  3640   6  CALIFORNIA      CA    6001  Alameda  6001400400
3641  3641   6  CALIFORNIA      CA    6001  Alameda  6001400500

                                           LOCATION  AREA_SQMI  E_TOTPOP  ...  \
3637  Census Tract 4001, Alameda County, California   2.661919    3018.0  ...
3638  Census Tract 4002, Alameda County, California   0.226816    1960.0  ...
3639  Census Tract 4003, Alameda County, California   0.426769    5236.0  ...
3640  Census Tract 4004, Alameda County, California   0.275958    4171.0  ...
3641  Census Tract 4005, Alameda County, California   0.227919    3748.0  ...

      F_NOVEH  F_GROUPQ  F_THEME4  F_TOTAL  E_UNINSUR  M_UNINSUR  EP_UNINSUR  \
3637      0.0       0.0       0.0      1.0      110.0       65.0         3.6
3638      0.0       0.0       0.0      0.0       73.0       47.0         3.7
3639      0.0       0.0       0.0      0.0      160.0       88.0         3.1
3640      0.0       0.0       0.0      0.0      173.0       74.0         4.2
3641      0.0       0.0       0.0      0.0      397.0      263.0        10.6

      MP_UNINSUR  E_DAYPOP  year
3637         2.1    5082.0  2016
3638         2.4    2644.0  2016
3639         1.7    3819.0  2016
3640         1.8    2513.0  2016
3641         6.6    1789.0  2016

[5 rows x 126 columns]
#+end_example

** repeat above steps with 2014 dataset
- [ATSDR CDC Documentation Download](https://www.atsdr.cdc.gov/placeandhealth/svi/data_documentation_download.html)
- According to the CDC's SVI documentation for 2014. The method for calculating Percentile Ranks is expended. The "F_" suffix indicates Flags, and the Flags percentile ranks are made with the top 95% (highly vulnerable) in mind.
#+begin_src jupyter-python :session py :kernel Python3 :tangle yes
df2 = pd.read_csv('/home/cynfish/OneDrive/Wentworth/Fall-2021-WIT/CSAS/Final Project/SVI2014_US.csv')
Cal2014 = df2[df2["ST_ABBR"] == "CA"]
Cal2014 = Cal2014[~Cal2014.eq(-999).any(1)]
Cal2014 = Cal2014.reindex()
Cal2014['year'] = pd.to_datetime('2014', format='%Y')
Cal2014['year'] = Cal2014['year'].dt.year
Cal2014.to_csv("/home/cynfish/OneDrive/Wentworth/Fall-2021-WIT/CSAS/Final Project/Cal2014_SVI_cleaned.csv", index = False)
Cal2014.iloc[:5]
#+end_src

#+RESULTS:
#+begin_example
      FID              AFFGEOID  TRACTCE  ST        STATE ST_ABBR  STCNTY  \
7759   -1  1400000US06001400100   400100   6   California      CA    6001
7760   -1  1400000US06001400200   400200   6   California      CA    6001
7761   -1  1400000US06001400300   400300   6   California      CA    6001
7762   -1  1400000US06001400400   400400   6   California      CA    6001
7763   -1  1400000US06001400500   400500   6   California      CA    6001

        COUNTY        FIPS                                       LOCATION  \
7759   Alameda  6001400100  Census Tract 4001, Alameda County, California
7760   Alameda  6001400200  Census Tract 4002, Alameda County, California
7761   Alameda  6001400300  Census Tract 4003, Alameda County, California
7762   Alameda  6001400400  Census Tract 4004, Alameda County, California
7763   Alameda  6001400500  Census Tract 4005, Alameda County, California

      ...  F_NOVEH  F_GROUPQ  F_THEME4  F_TOTAL  E_UNINSUR  M_UNINSUR  \
7759  ...      0.0       1.0       1.0      1.0      114.0       63.0
7760  ...      0.0       0.0       0.0      1.0      105.0       45.0
7761  ...      0.0       0.0       0.0      0.0      404.0      203.0
7762  ...      0.0       0.0       0.0      0.0      292.0      100.0
7763  ...      0.0       0.0       0.0      0.0      555.0      251.0

      EP_UNINSUR  MP_UNINSUR  E_DAYPOP  year
7759         3.4         1.9    5042.0  2014
7760         5.4         2.2    3190.0  2014
7761         7.4         3.8    4381.0  2014
7762         6.8         2.3    2405.0  2014
7763        15.8         6.6    2043.0  2014

[5 rows x 128 columns]
#+end_example

** repeat above steps with 2010 dataset
- Differences from Later Datasets: Because this is the earlier dataset in the CDC's ATSDR Social Vulnerability Index.
- The fields used in this one is slightly different from 2016 and onwards. This dataset is used because for the general purpose the fields convey a comparason to newer data.
- Census tracts will often be merged or split depending on population. Therefore, it is valuable to moniter census tract changes.
#+begin_src jupyter-python :session py :kernel Python3 :tangle yes
df3 = pd.read_csv('/home/cynfish/OneDrive/Wentworth/Fall-2021-WIT/CSAS/Final Project/SVI2010_US.csv')
df3.rename(columns={"STATE_NAME": "STATE", "STATE_ABBR": "ST_ABBR", "STCOFIPS": "STCNTY", "R_PL_THEME1": "RPL_THEME1", "R_PL_THEME2": "RPL_THEME2", "R_PL_THEME3": "RPL_THEME3", "R_PL_THEME4": "RPL_THEME4", "R_PL_THEMES": "RPL_THEMES"}, inplace=True, errors="raise")
Cal2010 = df3[df3["ST_ABBR"] == "CA"]
Cal2010 = Cal2010[~Cal2010.eq(-999).any(1)]
Cal2010 = Cal2010.reindex()
Cal2010['year'] = pd.to_datetime('2010', format='%Y')
Cal2010['year'] = Cal2010['year'].dt.year
Cal2010.to_csv("/home/cynfish/OneDrive/Wentworth/Fall-2021-WIT/CSAS/Final Project/Cal2010_SVI_cleaned.csv", index = False)
Cal2010.iloc[:5]
#+end_src

#+RESULTS:
#+begin_example
                   GEO_ID  STATE_FIPS  CNTY_FIPS   TRACT  CENSUSAREA  STCNTY  \
353  1400000US06085504602           6         85  504602      22.044    6085
354  1400000US06085504802           6         85  504802       0.707    6085
355  1400000US06085504803           6         85  504803       0.558    6085
356  1400000US06085504805           6         85  504805       0.560    6085
357  1400000US06085504901           6         85  504901       0.548    6085

           FIPS ST_ABBR       STATE              COUNTY  ... F_PL_LIMENG  \
353  6085504602      CA  California  Santa Clara County  ...           0
354  6085504802      CA  California  Santa Clara County  ...           0
355  6085504803      CA  California  Santa Clara County  ...           0
356  6085504805      CA  California  Santa Clara County  ...           0
357  6085504901      CA  California  Santa Clara County  ...           0

     F_PL_THEME3  F_PL_MUNIT  F_PL_MOBILE  F_PL_CROWD  F_PL_NOVEH  \
353            0           0            0           0           0
354            0           0            1           1           0
355            0           1            0           1           0
356            0           0            1           1           0
357            0           1            0           0           0

     F_PL_GROUPQ  F_PL_THEME4  F_PL_TOTAL  year
353            0            0           0  2010
354            0            2           2  2010
355            0            2           2  2010
356            0            2           2  2010
357            0            1           1  2010

[5 rows x 108 columns]
#+end_example

* Different Names
Here, we encounter the first problem with combining datasets, the value names changed over the years. Like STATE_NAME to STATE, and STATE_ABBR to ST_ABBR. This has been changed when making 4 seperate files of California SVI by available year.

* Plot Visualizations
One of the goals of our project is to display a Social Vulnerability of a community over the years in reaction to Climate Change.
In this example, we will display [County] of California and their changes in Social Vulnerability from 2010 to 2018 using a **histogram**.

To achieve this, all census tracks of a county will need to be combined. We use this [Census Track Changes](https://datadrivendetroit.org/blog/2021/09/16/2020-census-tract-changes/) website to consider how to show the social vulnerability of a county, or even an entire state.

** Fields used for Visualizations
*** STATE and County info
STATE = California
ST_ABBR = CA
COUNTY = All available counties in California
*** **FIPS**:
Form 477 Census Tract Information, this is a 11-digit number that uniquely identifies each census tract in the US.
**From left to right: 2-digit State Code, 3-digit country code, 6-digit tract code.**
*** RPL_THEME (1-4, S)
The 4 themes are the derived from survey from the population in the census tract area.
- Socioeconomic – RPL_THEME1
- Household Composition & Disability – RPL_THEME2
- Minority Status & Language – RPL_THEME3
- Housing Type & Transportation – RPL_THEME4
- Overall Ranking – RPL_THEMES
*** CENSUS TRACT
Census tract in the same county have the same beginning digits. If an example county have 4 separate tracts, then it will have the first 4 tract code appended with 2-digits code ranging from 01 to 04.

* Histogram
For this visualization, we see Merced County (6047) for 4 seperate time periods [2010, 2014, 2016, 2018]
#+begin_src jupyter-python :session py :kernel Python3 :tangle yes
Merced2018 = Cal2018.loc[Cal2018['STCNTY']==6047]
Merced2018.reset_index(inplace=True)
Merced2018 = Merced2018[['STCNTY', 'COUNTY', 'year', 'RPL_THEME1', 'RPL_THEME2', 'RPL_THEME3', 'RPL_THEME4', 'RPL_THEMES']]
Merced2018.head(5)
#+end_src

#+RESULTS:
#+begin_example
   STCNTY  COUNTY  year  RPL_THEME1  RPL_THEME2  RPL_THEME3  RPL_THEME4  \
0    6047  Merced  2018      0.7240      0.3898      0.8133      0.5819
1    6047  Merced  2018      0.5019      0.5658      0.7550      0.3992
2    6047  Merced  2018      0.3923      0.7239      0.7489      0.2510
3    6047  Merced  2018      0.8725      0.9820      0.8507      0.3144
4    6047  Merced  2018      0.7409      0.7494      0.8645      0.7623

   RPL_THEMES
0      0.7121
1      0.5633
2      0.4860
3      0.8628
4      0.8501
#+end_example

#+begin_src jupyter-python :session py :kernel Python3 :tangle yes
Merced2016 = Cal2016.loc[Cal2016['STCNTY']==6047]
Merced2016.reset_index(inplace=True)
Merced2016 = Merced2016[['STCNTY', 'COUNTY', 'year', 'RPL_THEME1', 'RPL_THEME2', 'RPL_THEME3', 'RPL_THEME4', 'RPL_THEMES']]
Merced2016.head(5)
#+end_src

#+RESULTS:
#+begin_example
   STCNTY  COUNTY  year  RPL_THEME1  RPL_THEME2  RPL_THEME3  RPL_THEME4  \
0    6047  Merced  2016      0.8787      0.8274      0.8898      0.7350
1    6047  Merced  2016      0.8418      0.8566      0.9010      0.6734
2    6047  Merced  2016      0.9122      0.7892      0.9375      0.5400
3    6047  Merced  2016      0.8669      0.7540      0.9681      0.7279
4    6047  Merced  2016      0.7304      0.5851      0.8410      0.6985

   RPL_THEMES
0      0.9144
1      0.8954
2      0.8877
3      0.9111
4      0.7877
#+end_example

#+begin_src jupyter-python :session py :kernel Python3 :tangle yes
Merced2014 = Cal2014.loc[Cal2014['STCNTY']==6047]
Merced2014.reset_index(inplace=True)
Merced2014 = Merced2014[['STCNTY', 'COUNTY', 'year', 'RPL_THEME1', 'RPL_THEME2', 'RPL_THEME3', 'RPL_THEME4', 'RPL_THEMES']]
Merced2014.head(5)
#+end_src

#+RESULTS:
#+begin_example
   STCNTY   COUNTY  year  RPL_THEME1  RPL_THEME2  RPL_THEME3  RPL_THEME4  \
0    6047   Merced  2014      0.8458      0.7530      0.8892      0.8231
1    6047   Merced  2014      0.9074      0.6857      0.9051      0.9111
2    6047   Merced  2014      0.8921      0.8143      0.9541      0.6338
3    6047   Merced  2014      0.8852      0.7494      0.9672      0.6874
4    6047   Merced  2014      0.8588      0.3658      0.8676      0.6539

   RPL_THEMES
0      0.9062
1      0.9459
2      0.9053
3      0.9051
4      0.7984
#+end_example

#+begin_src jupyter-python :session py :kernel Python3 :tangle yes
Merced2010 = Cal2010.loc[Cal2010['STCNTY']==6047]
Merced2010.reset_index(inplace=True)
Merced2010 = Merced2010[['STCNTY', 'COUNTY', 'year', 'RPL_THEME1', 'RPL_THEME2', 'RPL_THEME3', 'RPL_THEME4', 'RPL_THEMES']]
Merced2010.head(5)
#+end_src

#+RESULTS:
#+begin_example
   STCNTY         COUNTY  year  RPL_THEME1  RPL_THEME2  RPL_THEME3  \
0    6047  Merced County  2010      0.8197       0.930       0.846
1    6047  Merced County  2010      0.9108       0.755       0.936
2    6047  Merced County  2010      0.9376       0.828       0.968
3    6047  Merced County  2010      0.9774       0.966       0.845
4    6047  Merced County  2010      0.8382       0.511       0.886

   RPL_THEME4  RPL_THEMES
0      0.6390      0.8650
1      0.8620      0.9475
2      0.7878      0.9526
3      0.9364      0.9874
4      0.9924      0.9523
#+end_example

Combine all 4 datasets
#+begin_src jupyter-python :session py :kernel Python3 :tangle yes
Merced = pd.concat([Merced2010, Merced2014, Merced2016, Merced2018])
Merced.info
#+end_src

#+RESULTS:
#+begin_example
<bound method DataFrame.info of     STCNTY         COUNTY  year  RPL_THEME1  RPL_THEME2  RPL_THEME3  \
0     6047  Merced County  2010      0.8197      0.9300      0.8460
1     6047  Merced County  2010      0.9108      0.7550      0.9360
2     6047  Merced County  2010      0.9376      0.8280      0.9680
3     6047  Merced County  2010      0.9774      0.9660      0.8450
4     6047  Merced County  2010      0.8382      0.5110      0.8860
..     ...            ...   ...         ...         ...         ...
44    6047         Merced  2018      0.8771      0.7980      0.7895
45    6047         Merced  2018      0.9161      0.7542      0.8148
46    6047         Merced  2018      0.9997      0.7874      0.9773
47    6047         Merced  2018      0.8910      0.5970      0.9187
48    6047         Merced  2018      0.7572      0.2397      0.8712

    RPL_THEME4  RPL_THEMES
0       0.6390      0.8650
1       0.8620      0.9475
2       0.7878      0.9526
3       0.9364      0.9874
4       0.9924      0.9523
..         ...         ...
44      0.9869      0.9713
45      0.8671      0.9382
46      0.8985      0.9894
47      0.9321      0.9464
48      0.8392      0.7915

[196 rows x 8 columns]>
#+end_example
** Create Histogram
#+begin_example python
# See Jupyter Notebook FinalProject-Demo
colors = ['red', 'blue', 'orange', 'green']
plt.hist([Merced2010['RPL_THEMES'], Merced2014['RPL_THEMES'], Merced2016['RPL_THEMES'], Merced2018['RPL_THEMES']],
         label=['2010', '2014', '2016', '2018'], density=True, histtype='bar', color=colors)

plt.legend(loc='upper left')
plt.xlabel('Percentile Rank')
plt.ylabel('Tracts')
plt.title('Merced County, CA\n Social Vulnerability Index Comparison Year 2010, 2014, 2016, 2018')

plt.show()
#+end_example
As one can see, Merced County is a highly vulberable area in California. With this histogram we can see the most census tracts in this county is the top 95% vulnerable percentile.

We can infer that Merced County, when hit with the effects of Climate Change, will:
- Recover slowly regarding Infrastructure
- Suffer more damages socioeconomically
- Require plenty of support in case of diasters
  - This includes funding, emergency shelters and personnel, and needs plans accounting for those with special needs.

** Comparison: Nevada 6057
Now that we
For extra comparisons, here is the [Climate at a Glance](https://www.ncdc.noaa.gov/cag/statewide/time-series/4/pmdi/1/1/2010-2018) data for state wide temperature change for California. It is not conclusive, but with by comparing certain California counties' SVI and Climate at a Glance data. The effects of drastic climate change has on the Social Vulnerability is displayed.
